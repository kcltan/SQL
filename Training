--SQL Training using a dvdrental database--

--#1 Challenge
SELECT first_name,last_name,email FROM customer;

--#2 Challenge
SELECT DISTINCT rating from film;

SELECT COUNT(rating) from film; 

SELECT COUNT(DISTINCT(rating)) from film;

--check no. rows
SELECT COUNT(*) FROM payment;
SELECT COUNT(DISTINCT amount) FROM payment;

-- SELECT WHERE
SELECT * FROM customer
WHERE first_name = 'Jared';

SELECT COUNT(title) FROM film
WHERE rental_rate > 4 AND replacement_cost >= 19.99
AND rating = 'R';

SELECT * FROM film
WHERE rating != 'R';

--#3 Challenge
SELECT first_name,last_name,email FROM customer
where first_name = 'Nancy' AND last_name = 'Thomas';

SELECT description FROM film
WHERE title = 'Outlaw Hanky';

SELECT * FROM address;

SELECT phone FROM address
WHERE address = '259 Ipoh Drive';

SELECT first_name,last_name,email FROM customer
ORDER BY last_name ASC,first_name ASC;

SELECT * FROM customer
ORDER BY store_id,first_name ASC;

SELECT store_id,first_name,last_name FROM Customer
ORDER BY store_id DESC, first_name ASC;

SELECT * FROM payment
WHERE amount != 0.00
ORDER BY payment_date ASC
LIMIT 10;

SELECT customer_id FROM payment
ORDER BY payment_date ASC
LIMIT 10;

SELECT title,length FROM film
ORDER BY length ASC
LIMIT 5;

SELECT COUNT(title) FROM film
where length <= 50;

SELECT * FROM payment 
LIMIT 2;

SELECT * FROM payment 
WHERE payment_date BETWEEN '2007-02-01' AND '2007-02-15';

SELECT * FROM payment 
LIMIT 2;

SELECT DISTINCT(amount) FROM payment
ORDER BY amount;

SELECT * FROM payment
WHERE amount NOT IN(0.99,1.98,1.99); 

 SELECT first_name FROM customer
 WHERE first_name LIKE 'A%';
 
 SELECT title FROM film
 WHERE title LIKE 'Mission _%';

SELECT first_name FROM customer
WHERE first_name LIKE '_her%';

SELECT * FROM customer
WHERE first_name LIKE 'J%' AND last_name LIKE 'S%';

SELECT * FROM customer
WHERE first_name ILIKE 'j%' AND last_name ILIKE 's%';

SELECT * FROM customer
WHERE first_name LIKE '%er%';

SELECT * FROM customer
WHERE first_name NOT LIKE '%er%';

--#4 Challenge
SELECT COUNT(*) FROM payment
WHERE amount > 5.00;

SELECT COUNT(*) FROM actor
WHERE first_name LIKE 'P%';

SELECT DISTINCT(COUNT(district)) FROM address;

SELECT DISTINCT(district) FROM address;

SELECT COUNT(*) FROM film
WHERE rating = 'R' 
AND replacement_cost BETWEEN 5 and 15;

SELECT COUNT(*) FROM film
WHERE  title ILIKE '%Truman%';

--------------------------------------------

SELECT MIN(replacement_cost) FROM film;
SELECT MAX(replacement_cost) FROM film;

SELECT MAX(replacement_cost),MIN(replacement_cost)
FROM film;

SELECT ROUND(AVG(replacement_cost),2)
FROM film;

SELECT rating, AVG(rental_rate) from film
GROUP BY rating;

SELECT customer_id, SUM(amount) FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC;

SELECT customer_id,staff_id,SUM(amount) FROM payment
GROUP BY staff_id,customer_id 
ORDER BY customer_id;

SELECT * FROM payment;

SELECT DATE(payment_date),SUM(amount) FROM payment
GROUP BY DATE(payment_date)
ORDER BY SUM(amount) DESC;

--#5 Challenge
SELECT staff_id, COUNT(payment_id) FROM payment
GROUP BY staff_id;

SELECT rating, ROUND(AVG(replacement_cost),2) FROM film
GROUP BY rating
ORDER BY rating DESC;

SELECT customer_id, ROUND(SUM(amount),2) FROM payment
GROUP BY customer_id
ORDER BY sum(amount) DESC
LIMIT 5;

SELECT customer_id, SUM(amount) FROM payment
GROUP BY customer_id
HAVING SUM(amount) > 100;

SELECT store_id, COUNT(*) FROM customer
GROUP BY store_id
HAVING COUNT(*) > 300;

--#6 Challenge
SELECT customer_id, COUNT(payment_id) FROM payment
GROUP BY customer_id
HAVING COUNT(payment_id) >= 40;

SELECT customer_id, staff_id, SUM(amount) FROM payment
GROUP BY customer_id, staff_id
HAVING staff_id = 2 AND SUM(amount) > 100
ORDER BY customer_id; 

-------------Assessment test------------------
SELECT customer_id, SUM(amount) FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) > 110;

SELECT COUNT(title) from film
WHERE title ILIKE 'j%';

SELECT customer_id,first_name,last_name,address_id from customer
WHERE first_name ILIKE 'e%' AND address_id < 500
GROUP BY customer_id
ORDER BY customer_id DESC
LIMIT 1;
-------------------------------------------------------
SELECT amount AS rental_price FROM payment;

SELECT COUNT(amount) AS num_transactions FROM payment;

SELECT customer_id,SUM(amount) AS total_spent
FROM payment
GROUP BY customer_id
HAVING SUM(amount) > 100;

SELECT customer_id,amount AS new_name
FROM payment
WHERE amount > 2;

-------------------------------------------------------
SELECT payment_id,payment.customer_id,first_name FROM payment
INNER JOIN customer 
ON payment.customer_id = customer.customer_id;

SELECT * FROM customer
FULL OUTER JOIN payment
ON customer.customer_id  = payment.customer_id;

SELECT film.film_id, film.title, inventory_id
FROM film
LEFT JOIN inventory ON
inventory.film_id = film.film_id
--These films are not in inventory but have info on the films
where inventory.film_id IS null;

--#7 Challenge
SELECT first_name, last_name, email FROM customer
INNER JOIN address
ON customer.address_id = address.address_id
WHERE district = 'California';

SELECT film.title,actor.first_name,actor.last_name FROM film_actor
INNER JOIN film
ON film.film_id = film_actor.film_id
INNER JOIN actor
ON film_actor.actor_id = actor.actor_id
WHERE actor.first_name = 'Nick' and actor.last_name = 'Wahlberg';

------------------------------------------------------
SELECT EXTRACT(YEAR FROM payment_date) AS myyear
FROM payment;

SELECT AGE(payment_date)
FROM payment;

SELECT TO_CHAR(payment_date,'MONTH-YYYY')
FROM payment;

--#8 Challenge

SELECT DISTINCT(TO_CHAR(payment_date,'MONTH'))
FROM payment;

SELECT COUNT(*)
FROM payment
WHERE (TRIM(TO_CHAR(payment_date, 'Day'))) = 'Monday';

SELECT COUNT(*)
FROM payment
WHERE EXTRACT(dow FROM payment_date) = 1;

--------------------------------------------------------------
SELECT * FROM film;

SELECT ROUND(rental_rate/replacement_cost,2)*100 FROM film;

SELECT 0.1 * replacement_cost AS deposit
FROM film;

--------------------------------------------------------------
SELECT LENGTH(first_name) FROM customer;

SELECT first_name || ' ' || last_name AS full_name
FROM customer;

SELECT LOWER(left(first_name,1)) || LOWER(last_name) || '@gmail.com'
FROM customer;

-------------------------------------------------------
 SELECT title,rental_rate FROM film
 WHERE rental_rate >
 (SELECT AVG(rental_rate) FROM film);
 
SELECT film_id,title
FROM film
WHERE film_id IN
(SELECT inventory.film_id FROM rental
INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
WHERE return_date BETWEEN '2005-05-29' AND '2005-05-30');
 
SELECT first_name,last_name
FROM customer AS c 
WHERE EXISTS
(SELECT * FROM payment as p
WHERE p.customer_id = c.customer_id
AND amount > 11);

--------------------SELF JOIN-----------------------------
SELECT f1.title, f2.title, f1.length
FROM film AS f1
INNER JOIN film as f2 ON
f1.film_id != f2.film_id
AND f1.length = f2.length;
 
--------------------DATABASES & TABLES----------------------------------
SELECT * FROM payment;
  
-------------------CASE---------------------------------------------

SELECT customer_id,
CASE
	WHEN (customer_id <= 100) THEN 'Premium'
	WHEN (customer_id BETWEEN 100 and 200) THEN 'Plus'
	ELSE 'Normal'
END AS customer_class
FROM customer;

SELECT customer_id,
CASE customer_id
	WHEN 2 THEN 'Winner'
	WHEN 5 THEN 'Second Place'
	ELSE 'Normal'
	
END AS raffle_results
FROM customer;

SELECT 
SUM(CASE rental_rate 
	WHEN 0.99 THEN 1
	ELSE 0 
END) AS bargains,
SUM(CASE rental_rate
   WHEN 2.99 THEN 1
   ELSE 0
END) AS regular,
SUM(CASE rental_rate
   WHEN 4.99 THEN 1
   ELSE 0
END) AS premium
FROM film;

-------- CASE CHALLENGE ----------------------------
SELECT
SUM(CASE rating
   WHEN 'R' THEN 1
   ELSE 0
END) AS rated,
SUM(CASE rating
   WHEN 'PG' THEN 1
   ELSE 0
END) as pg,
SUM(CASE rating
   WHEN 'PG-13' THEN 1
   ELSE 0
END) as pg13
FROM film;

----------------------------------CAST---------------------------

SELECT CAST('5' AS INTEGER); 

SELECT '5'::INTEGER;

SELECT CHAR_LENGTH(CAST(inventory_id AS VARCHAR)) FROM rental;

---------------------VIEW------------------------

CREATE OR REPLACE VIEW customer_info AS
SELECT first_name,last_name,address,district FROM customer
INNER JOIN address
ON customer.address_id = address.address_id;

SELECT * FROM customer_info;







































